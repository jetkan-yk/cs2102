1. Abort offering if 0 session added successfully
2. Skip inputs that violates any constraints
3. courses, offerings, sessions pkeys
4. session lunch breaks
5. interesting: add_course_offering (custom type)
6. interesting: get_available_room (array operations)
7. if have time: implement credit card cvv encryption
8. all end dates are inclusive, but end times are not inclusive
    e.g. [start_date, end_date] vs [start_time, end_time)
9. only employees and sessions may be removed by routines, hence assuming
    no delete use case on other tables (related: on update/delete cascade)
10. date & time in ISO 8601 format
11. rename Packages -> packages
12. routines always returns something for information
13. phone number max limit 15 chars, cc_num max 19 chars
14. discuss design decision: use before insert triggers or in-routine logic
    to apply restrictions, e.g. check whether a customer is allowed to register
    a certain session.
        method 1: use helper function and PERFORM e.g. add_course_offering
        method 2: use triggers
15. might misunderstood how session works (atomic or weekly recurring events?)
16. how to print result for functions that have multiple return types?
17. interesting: output for register_session
18. proc file organization
19. triggers depending routines: 
    check_rid_func() -> find_rooms()
20. need rework: update_start_end_dates, update_seating_capacity for delete case
21. get_latest_cc_number() and get_all_cc_numbers() to prevent signing up 2 sessions of
    the same courses by exploiting the change cc_number loophole
22. strictly routine based restrictions: update_room, register_session
    strictly trigger based restrictions: add_session, delete session
    flexible: remove_session, add_redeems
23. SELECT R.*
24. dont use natural join
25. For each course offered by the company, a customer can register for at most one of its sessions 
    before its registration deadline -> checks offering_id
26. Possible to merge registers, redeems into signups as both have similar operations
27. overloading function: count_signups, count_remain_seats